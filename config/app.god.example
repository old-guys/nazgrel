APP_ROOT = File.expand_path(File.join(File.dirname(__FILE__),'..'))
RAILS_ENV = ENV['RAILS_ENV'] || 'production'
PID_FILE = "#{APP_ROOT}/tmp/pids/unicorn.pid"

God.watch do |w|
    w.env = {
      "APP_ROOT" => "#{APP_ROOT}",
      "BUNDLE_GEMFILE" => "#{APP_ROOT}/Gemfile",
      "PID_FILE" => "#{APP_ROOT}/tmp/pids/unicorn.pid"
    }

  w.dir = "#{APP_ROOT}"
  w.log = "#{APP_ROOT}/log/god_#{RAILS_ENV}.log"

  w.name = "nazgrel"
  w.group = "ishanggang_web"

  w.start = "RAILS_ENV=#{RAILS_ENV} ~/.rvm/bin/rvm in #{APP_ROOT} do bundle exec unicorn -c #{APP_ROOT}/config/unicorn/production.rb -E #{RAILS_ENV} -D"

  # QUIT gracefully shuts down workers
  w.stop = "kill -QUIT `cat #{w.env['PID_FILE']}`"

  # USR2 causes the master to re-create itself and spawn a new worker pool
  w.restart = "kill -USR2 `cat #{w.env['PID_FILE']}`"


  w.pid_file = "#{w.env['PID_FILE']}"
  w.log = "#{APP_ROOT}/log/god_#{RAILS_ENV}.log"

  w.interval = 30.seconds # default
  w.start_grace = 10.seconds
  w.restart_grace = 10.seconds     # 重启缓冲时间
  w.behavior(:clean_pid_file)

  w.start_if do |start|
    start.condition(:process_running) do |c|
      c.interval = 5.seconds
      c.running = false
    end
  end

  # determine when process has finished starting
  w.transition([:start, :restart], :up) do |on|
    on.condition(:process_running) do |c|
      c.running = true
    end

    # failsafe
    on.condition(:tries) do |c|
      c.times = 5
      c.transition = :restart
    end
  end

  w.keepalive
end
